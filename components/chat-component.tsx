"use client";

import { useState, useEffect, useRef } from "react";
import { createClient } from "@/utils/supabase/client";
import { getSupabaseAuth } from "@/utils/supabase/auth-singleton";
import MessageComponent from "@/components/ui/message-card"; // Assuming MessageComponent props will be updated
import { Button } from "@/components/ui/button";
import { Send, X } from "lucide-react";
import { EmojiPicker, EmojiPickerSearch, EmojiPickerContent } from "@/components/emoji-board";
import { useEditCooldown } from './cooldown-context'; // Assuming cooldown-context.tsx is in the same directory or adjust path
import { Popover, PopoverContent, PopoverTrigger } from '@radix-ui/react-popover';

// chatmessage table structure
type ChatMessage = {
  chatmessageid: string;  
  sentby: string;         
  content: string;   
  datecreated: string;    
  isarchived: boolean;    
};

// For MessageComponent, the props would ideally change to something like this:
// type MessageProps = {
//   sentBy: string;
//   context: string;
//   dateCreated: string;
//   viewingUserId?: string | null;
//   viewingUserFullName?: string | null;
//   viewingUserAvatarUrl?: string | null;
// };
// MessageComponent would then use these viewingUser... props if sentBy === viewingUserId.
// For other users, it would use its existing cache/fetch logic.

const MAX_CHAR_LIMIT = 100;

// Function to sanitize text
const sanitizeText = (text: string): string => {
  if (!text) return '';
  const normalizedInput = text.trim().toLowerCase();
  const sqlPattern = /('|--|;|\b(OR|AND|UNION|SELECT|INSERT|UPDATE|DELETE|DROP|ALTER|EXEC|FROM|WHERE)\b)/i;
  const htmlPattern = /<[^>]*>|javascript:|onerror=|onload=|alert\(|eval\(|document\.|window\./i;
  if (sqlPattern.test(normalizedInput) || htmlPattern.test(normalizedInput)) {
    return 'I sent an injection to the database!!!';
  }
  return text
    .replace(/</g, '<')
    .replace(/>/g, '>') 
    .replace(/&/g, '&')
    .replace(/"/g, '"')
};

export default function ChatComponent({ messages }: { messages: ChatMessage[] }) {
  const supabase = createClient();
  const supabaseAuth = getSupabaseAuth();
  const [showChat, setShowChat] = useState(false);
  const [chats, setChats] = useState<ChatMessage[]>(messages || []);
  const [message, setMessage] = useState<string>("");
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const chatInputRef = useRef<HTMLTextAreaElement>(null);
  const [isOpen, setIsOpen] = useState(false);
  const { isEditCooldownActive, triggerGlobalEditCooldown, globalCooldownError } = useEditCooldown();
  
  const [currentUserDetails, setCurrentUserDetails] = useState<{
    id: string | null;
    fullName: string | null;
    avatarUrl: string | null;
  }>({
    id: null,
    fullName: "User", // Default/initial full name
    avatarUrl: null,   // Default/initial avatar
  });

  const [channel, setChannel] = useState<ReturnType<typeof supabase.channel> | null>(null);
  const [isConnected, setIsConnected] = useState(false);
  const [charCount, setCharCount] = useState(0); // Already present, ensure it's used if needed.
  
  useEffect(() => {
    // Get the current user's details when component mounts
    const fetchCurrentUserDetails = async () => {
      const user = await supabaseAuth.getUser();


      if (user && user.id) {
        const userId = user.id;
        let fetchedFullName: string | null = null;
        let fetchedAvatarUrl: string | null = null;

        // Fetch Full Name:
        // 1. From user_metadata
        fetchedFullName = user.user_metadata?.full_name || user.user_metadata?.name || null;
        // 2. If not in metadata, try 'contributor' table
        if (!fetchedFullName) {
          try {
            const { data: contributor, error: contributorError } = await supabase
              .from("contributor")
              .select("name")
              .eq("contributorid", userId)
              .single();
            if (contributorError && contributorError.code !== 'PGRST116') { // PGRST116: 0 rows, not an error here
                throw contributorError;
            }
            if (contributor) {
              fetchedFullName = contributor.name;
            }
          } catch (e) {
            console.error("Error fetching current user's full name from contributor:", e);
          }
        }

        // Fetch Avatar URL:
        // 1. From user_metadata
        fetchedAvatarUrl = user.user_metadata?.avatar_url || user.user_metadata?.picture || null;
        // 2. If not in metadata, try RPC 'get_user_avatar'
        if (!fetchedAvatarUrl) {
          try {
            const { data: avatarRpcResult, error: avatarRpcError } = await supabase
              .rpc('get_user_avatar', { user_id: userId });
            if (avatarRpcError) {
                throw avatarRpcError;
            }
            if (avatarRpcResult) {
              fetchedAvatarUrl = avatarRpcResult.avatar_url || avatarRpcResult.picture || null;
            }
          } catch (e) {
            console.error("Error fetching current user avatar via RPC:", e);
          }
        }
        
        setCurrentUserDetails({
          id: userId,
          fullName: fetchedFullName || "User", // Fallback name
          avatarUrl: fetchedAvatarUrl,
        });
      } else {
         setCurrentUserDetails({ id: null, fullName: "User", avatarUrl: null });
      }
    };
    
    fetchCurrentUserDetails();
    
    const newChannel = supabase.channel('chat-room');
    
    newChannel
      .on('broadcast', { event: 'message' }, (payload) => {
        const broadcastMessage = payload.payload as ChatMessage;
        setChats((prevChats) => [...prevChats, broadcastMessage]);
      })
      .subscribe(async (status) => {
        if (status === 'SUBSCRIBED') {
          setIsConnected(true);
        } else {
          setIsConnected(false);
        }
      });
    
    setChannel(newChannel);
    
    return () => {
      if (channel) {
        supabase.removeChannel(channel);
      }
    };
  }, [supabase, supabaseAuth]); // Added supabase and supabaseAuth to dependencies

  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  }, [chats]);

  useEffect(() => {
    if (showChat) {
      setTimeout(() => {
        messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
      }, 100);
    }
  }, [showChat]);

  useEffect(() => {
    if (isEditCooldownActive) {
      setMessage("");
      setCharCount(0);
      if (chatInputRef.current) {
        chatInputRef.current.style.height = '32px'; // Reset height
      }
    }
  }, [isEditCooldownActive]);

  const sendMessage = async () => {
    if (isEditCooldownActive || !message.trim() || !channel || !isConnected || !currentUserDetails.id) {
        if(!currentUserDetails.id) console.warn("Cannot send message: current user ID is not available.");
        return;
    }
    
    const originalMessage = message.trim();
    const messageContent = sanitizeText(originalMessage);

    const newMessage: ChatMessage = {
      chatmessageid: crypto.randomUUID(),
      sentby: currentUserDetails.id, // Use current user's ID
      content: messageContent,
      datecreated: new Date().toISOString(),
      isarchived: false
    };

    if (messageContent === 'I sent an injection to the database!!!' && originalMessage !== messageContent) {
      triggerGlobalEditCooldown();
      // Do not proceed to send or save this message
      return; 
    }

    setChats((prevChats) => [...prevChats, newMessage]);
    setMessage("");
    setCharCount(0);
    
    if (chatInputRef.current) chatInputRef.current.style.height = '32px';
    
    try {
        await channel.send({
            type: 'broadcast',
            event: 'message',
            payload: newMessage,
        });
    } catch (error) {
        console.error("Failed to broadcast message:", error);
        // Potentially roll back adding the message to local state or show an error
        return;
    }
        
    const dbPayload = { 
      sentby: currentUserDetails.id,
      content: messageContent,
      // chatmessageid and datecreated might be handled by DB defaults/triggers
    };
    console.log('Sending to database:', dbPayload);
    
    try {
      const { error: insertError } = await supabase.from("chatmessage").insert([dbPayload]);
      if (insertError) throw insertError;
    } catch (error) {
      console.error("Failed to save message to database:", error);
      // Handle failed DB save, e.g., notify user, maybe remove from local `chats`
    }
  };

  return (
    <div className="fixed bottom-6 right-7 flex items-center z-10">
      <Button 
        variant={"chat"}
        onClick={() => setShowChat(!showChat)}
        className="w-[160px] flex justify-center items-center h-[40px]"
      >
        {showChat ? 
          <svg width="90" height="10" viewBox="0 0 90 13" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M0.935 6.4C0.935 5.30133 1.18033 4.32 1.671 3.456C2.17233 2.58133 2.84967 1.904 3.703 1.424C4.567 0.933333 5.53233 0.688 6.599 0.688C7.847 0.688 8.94033 1.008 9.879 1.648C10.8177 2.288 11.4737 3.17333 11.847 4.304H9.271C9.015 3.77067 8.65233 3.37067 8.183 3.104C7.72433 2.83733 7.191 2.704 6.583 2.704C5.93233 2.704 5.351 2.85867 4.839 3.168C4.33767 3.46667 3.943 3.89333 3.655 4.448C3.37767 5.00267 3.239 5.65333 3.239 6.4C3.239 7.136 3.37767 7.78667 3.655 8.352C3.943 8.90667 4.33767 9.33867 4.839 9.648C5.351 9.94667 5.93233 10.096 6.583 10.096C7.191 10.096 7.72433 9.96267 8.183 9.696C8.65233 9.41867 9.015 9.01333 9.271 8.48H11.847C11.4737 9.62133 10.8177 10.512 9.879 11.152C8.951 11.7813 7.85767 12.096 6.599 12.096C5.53233 12.096 4.567 11.856 3.703 11.376C2.84967 10.8853 2.17233 10.208 1.671 9.344C1.18033 8.48 0.935 7.49867 0.935 6.4ZM16.0003 0.16V12H13.7603V0.16H16.0003ZM22.1494 12.144C21.296 12.144 20.528 11.9573 19.8454 11.584C19.1627 11.2 18.624 10.6613 18.2294 9.968C17.8454 9.27467 17.6534 8.47467 17.6534 7.568C17.6534 6.66133 17.8507 5.86133 18.2454 5.168C18.6507 4.47467 19.2 3.94133 19.8934 3.568C20.5867 3.184 21.36 2.992 22.2134 2.992C23.0667 2.992 23.84 3.184 24.5334 3.568C25.2267 3.94133 25.7707 4.47467 26.1654 5.168C26.5707 5.86133 26.7734 6.66133 26.7734 7.568C26.7734 8.47467 26.5654 9.27467 26.1494 9.968C25.744 10.6613 25.1894 11.2 24.4854 11.584C23.792 11.9573 23.0134 12.144 22.1494 12.144ZM22.1494 10.192C22.5547 10.192 22.9334 10.096 23.2854 9.904C23.648 9.70133 23.936 9.40267 24.1494 9.008C24.3627 8.61333 24.4694 8.13333 24.4694 7.568C24.4694 6.72533 24.2454 6.08 23.7974 5.632C23.36 5.17333 22.8214 4.944 22.1814 4.944C21.5414 4.944 21.0027 5.17333 20.5654 5.632C20.1387 6.08 19.9254 6.72533 19.9254 7.568C19.9254 8.41067 20.1334 9.06133 20.5494 9.52C20.976 9.968 21.5094 10.192 22.1494 10.192ZM31.8085 12.144C31.0832 12.144 30.4325 12.016 29.8565 11.76C29.2805 11.4933 28.8218 11.136 28.4805 10.688C28.1498 10.24 27.9685 9.744 27.9365 9.2H30.1925C30.2352 9.54133 30.4005 9.824 30.6885 10.048C30.9872 10.272 31.3552 10.384 31.7925 10.384C32.2192 10.384 32.5498 10.2987 32.7845 10.128C33.0298 9.95733 33.1525 9.73867 33.1525 9.472C33.1525 9.184 33.0032 8.97067 32.7045 8.832C32.4165 8.68267 31.9525 8.52267 31.3125 8.352C30.6512 8.192 30.1072 8.02667 29.6805 7.856C29.2645 7.68533 28.9018 7.424 28.5925 7.072C28.2938 6.72 28.1445 6.24533 28.1445 5.648C28.1445 5.15733 28.2832 4.70933 28.5605 4.304C28.8485 3.89867 29.2538 3.57867 29.7765 3.344C30.3098 3.10933 30.9338 2.992 31.6485 2.992C32.7045 2.992 33.5472 3.25867 34.1765 3.792C34.8058 4.31467 35.1525 5.024 35.2165 5.92H33.0725C33.0405 5.568 32.8912 5.29067 32.6245 5.088C32.3685 4.87467 32.0218 4.768 31.5845 4.768C31.1792 4.768 30.8645 4.84267 30.6405 4.992C30.4272 5.14133 30.3205 5.34933 30.3205 5.616C30.3205 5.91467 30.4698 6.144 30.7685 6.304C31.0672 6.45333 31.5312 6.608 32.1605 6.768C32.8005 6.928 33.3285 7.09333 33.7445 7.264C34.1605 7.43467 34.5178 7.70133 34.8165 8.064C35.1258 8.416 35.2858 8.88533 35.2965 9.472C35.2965 9.984 35.1525 10.4427 34.8645 10.848C34.5872 11.2533 34.1818 11.5733 33.6485 11.808C33.1258 12.032 32.5125 12.144 31.8085 12.144ZM45.3753 7.376C45.3753 7.696 45.3539 7.984 45.3113 8.24H38.8313C38.8846 8.88 39.1086 9.38133 39.5033 9.744C39.8979 10.1067 40.3833 10.288 40.9593 10.288C41.7913 10.288 42.3833 9.93067 42.7353 9.216H45.1513C44.8953 10.0693 44.4046 10.7733 43.6793 11.328C42.9539 11.872 42.0633 12.144 41.0073 12.144C40.1539 12.144 39.3859 11.9573 38.7033 11.584C38.0313 11.2 37.5033 10.6613 37.1193 9.968C36.7459 9.27467 36.5592 8.47467 36.5592 7.568C36.5592 6.65067 36.7459 5.84533 37.1193 5.152C37.4926 4.45867 38.0153 3.92533 38.6873 3.552C39.3593 3.17867 40.1326 2.992 41.0073 2.992C41.8499 2.992 42.6019 3.17333 43.2633 3.536C43.9353 3.89867 44.4526 4.416 44.8153 5.088C45.1886 5.74933 45.3753 6.512 45.3753 7.376ZM43.0553 6.736C43.0446 6.16 42.8366 5.70133 42.4313 5.36C42.0259 5.008 41.5299 4.832 40.9433 4.832C40.3886 4.832 39.9193 5.00267 39.5353 5.344C39.1619 5.67467 38.9326 6.13867 38.8473 6.736H43.0553ZM50.2788 6.4C50.2788 5.30133 50.5241 4.32 51.0148 3.456C51.5161 2.58133 52.1934 1.904 53.0468 1.424C53.9108 0.933333 54.8761 0.688 55.9428 0.688C57.1908 0.688 58.2841 1.008 59.2228 1.648C60.1614 2.288 60.8174 3.17333 61.1908 4.304H58.6148C58.3588 3.77067 57.9961 3.37067 57.5268 3.104C57.0681 2.83733 56.5348 2.704 55.9268 2.704C55.2761 2.704 54.6948 2.85867 54.1828 3.168C53.6814 3.46667 53.2868 3.89333 52.9988 4.448C52.7214 5.00267 52.5828 5.65333 52.5828 6.4C52.5828 7.136 52.7214 7.78667 52.9988 8.352C53.2868 8.90667 53.6814 9.33867 54.1828 9.648C54.6948 9.94667 55.2761 10.096 55.9268 10.096C56.5348 10.096 57.0681 9.96267 57.5268 9.696C57.9961 9.41867 58.3588 9.01333 58.6148 8.48H61.1908C60.8174 9.62133 60.1614 10.512 59.2228 11.152C58.2948 11.7813 57.2014 12.096 55.9428 12.096C54.8761 12.096 53.9108 11.856 53.0468 11.376C52.1934 10.8853 51.5161 10.208 51.0148 9.344C50.5241 8.48 50.2788 7.49867 50.2788 6.4ZM68.096 3.008C68.768 3.008 69.3653 3.15733 69.888 3.456C70.4107 3.744 70.816 4.176 71.104 4.752C71.4027 5.31733 71.552 6 71.552 6.8V12H69.312V7.104C69.312 6.4 69.136 5.86133 68.784 5.488C68.432 5.104 67.952 4.912 67.344 4.912C66.7253 4.912 66.2347 5.104 65.872 5.488C65.52 5.86133 65.344 6.4 65.344 7.104V12H63.104V0.16H65.344V4.24C65.632 3.856 66.016 3.55733 66.496 3.344C66.976 3.12 67.5093 3.008 68.096 3.008ZM73.1061 7.536C73.1061 6.64 73.2821 5.84533 73.6341 5.152C73.9968 4.45867 74.4821 3.92533 75.0901 3.552C75.7088 3.17867 76.3968 2.992 77.1541 2.992C77.8155 2.992 78.3915 3.12533 78.8821 3.392C79.3835 3.65867 79.7835 3.99467 80.0821 4.4V3.136H82.3381V12H80.0821V10.704C79.7941 11.12 79.3941 11.4667 78.8821 11.744C78.3808 12.0107 77.7995 12.144 77.1381 12.144C76.3915 12.144 75.7088 11.952 75.0901 11.568C74.4821 11.184 73.9968 10.6453 73.6341 9.952C73.2821 9.248 73.1061 8.44267 73.1061 7.536ZM80.0821 7.568C80.0821 7.024 79.9755 6.56 79.7621 6.176C79.5488 5.78133 79.2608 5.48267 78.8981 5.28C78.5355 5.06667 78.1461 4.96 77.7301 4.96C77.3141 4.96 76.9301 5.06133 76.5781 5.264C76.2261 5.46667 75.9381 5.76533 75.7141 6.16C75.5008 6.544 75.3941 7.00267 75.3941 7.536C75.3941 8.06933 75.5008 8.53867 75.7141 8.944C75.9381 9.33867 76.2261 9.64267 76.5781 9.856C76.9408 10.0693 77.3248 10.176 77.7301 10.176C78.1461 10.176 78.5355 10.0747 78.8981 9.872C79.2608 9.65867 79.5488 9.36 79.7621 8.976C79.9755 8.58133 80.0821 8.112 80.0821 7.568ZM87.1339 4.976V9.264C87.1339 9.56267 87.2032 9.78133 87.3419 9.92C87.4912 10.048 87.7365 10.112 88.0779 10.112H89.1179V12H87.7099C85.8219 12 84.8779 11.0827 84.8779 9.248V4.976H83.8219V3.136H84.8779V0.943999H87.1339V3.136H89.1179V4.976H87.1339Z" fill="#1E1C14"/>
          </svg>
          : 
          <svg width="142" height="18" viewBox="0 0 142 18" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M0.942813 7.4C0.942813 6.30133 1.18815 5.32 1.67881 4.456C2.18015 3.58133 2.85748 2.904 3.71081 2.424C4.57481 1.93333 5.54015 1.688 6.60681 1.688C7.85481 1.688 8.94815 2.008 9.88681 2.648C10.8255 3.288 11.4815 4.17333 11.8548 5.304H9.27881C9.02281 4.77067 8.66015 4.37067 8.19081 4.104C7.73215 3.83733 7.19881 3.704 6.59081 3.704C5.94015 3.704 5.35881 3.85867 4.84681 4.168C4.34548 4.46667 3.95081 4.89333 3.66281 5.448C3.38548 6.00267 3.24681 6.65333 3.24681 7.4C3.24681 8.136 3.38548 8.78667 3.66281 9.352C3.95081 9.90667 4.34548 10.3387 4.84681 10.648C5.35881 10.9467 5.94015 11.096 6.59081 11.096C7.19881 11.096 7.73215 10.9627 8.19081 10.696C8.66015 10.4187 9.02281 10.0133 9.27881 9.48H11.8548C11.4815 10.6213 10.8255 11.512 9.88681 12.152C8.95881 12.7813 7.86548 13.096 6.60681 13.096C5.54015 13.096 4.57481 12.856 3.71081 12.376C2.85748 11.8853 2.18015 11.208 1.67881 10.344C1.18815 9.48 0.942813 8.49867 0.942813 7.4ZM17.7041 13.144C16.8507 13.144 16.0827 12.9573 15.4001 12.584C14.7174 12.2 14.1787 11.6613 13.7841 10.968C13.4001 10.2747 13.2081 9.47467 13.2081 8.568C13.2081 7.66133 13.4054 6.86133 13.8001 6.168C14.2054 5.47467 14.7547 4.94133 15.4481 4.568C16.1414 4.184 16.9147 3.992 17.7681 3.992C18.6214 3.992 19.3947 4.184 20.0881 4.568C20.7814 4.94133 21.3254 5.47467 21.7201 6.168C22.1254 6.86133 22.3281 7.66133 22.3281 8.568C22.3281 9.47467 22.1201 10.2747 21.7041 10.968C21.2987 11.6613 20.7441 12.2 20.0401 12.584C19.3467 12.9573 18.5681 13.144 17.7041 13.144ZM17.7041 11.192C18.1094 11.192 18.4881 11.096 18.8401 10.904C19.2027 10.7013 19.4907 10.4026 19.7041 10.008C19.9174 9.61333 20.0241 9.13333 20.0241 8.568C20.0241 7.72533 19.8001 7.08 19.3521 6.632C18.9147 6.17333 18.3761 5.944 17.7361 5.944C17.0961 5.944 16.5574 6.17333 16.1201 6.632C15.6934 7.08 15.4801 7.72533 15.4801 8.568C15.4801 9.41067 15.6881 10.0613 16.1041 10.52C16.5307 10.968 17.0641 11.192 17.7041 11.192ZM34.9792 4.008C36.0672 4.008 36.9419 4.344 37.6032 5.016C38.2752 5.67733 38.6112 6.60533 38.6112 7.8V13H36.3712V8.104C36.3712 7.41067 36.1952 6.88267 35.8432 6.52C35.4912 6.14667 35.0112 5.96 34.4032 5.96C33.7952 5.96 33.3099 6.14667 32.9472 6.52C32.5952 6.88267 32.4192 7.41067 32.4192 8.104V13H30.1792V8.104C30.1792 7.41067 30.0032 6.88267 29.6512 6.52C29.2992 6.14667 28.8192 5.96 28.2112 5.96C27.5925 5.96 27.1019 6.14667 26.7392 6.52C26.3872 6.88267 26.2112 7.41067 26.2112 8.104V13H23.9712V4.136H26.2112V5.208C26.4992 4.83467 26.8672 4.54133 27.3152 4.328C27.7739 4.11467 28.2752 4.008 28.8192 4.008C29.5125 4.008 30.1312 4.15733 30.6752 4.456C31.2192 4.744 31.6405 5.16 31.9392 5.704C32.2272 5.192 32.6432 4.78133 33.1872 4.472C33.7419 4.16267 34.3392 4.008 34.9792 4.008ZM51.7448 4.008C52.8328 4.008 53.7075 4.344 54.3688 5.016C55.0408 5.67733 55.3768 6.60533 55.3768 7.8V13H53.1368V8.104C53.1368 7.41067 52.9608 6.88267 52.6088 6.52C52.2568 6.14667 51.7768 5.96 51.1688 5.96C50.5608 5.96 50.0755 6.14667 49.7128 6.52C49.3608 6.88267 49.1848 7.41067 49.1848 8.104V13H46.9448V8.104C46.9448 7.41067 46.7688 6.88267 46.4168 6.52C46.0648 6.14667 45.5848 5.96 44.9768 5.96C44.3581 5.96 43.8675 6.14667 43.5048 6.52C43.1528 6.88267 42.9768 7.41067 42.9768 8.104V13H40.7368V4.136H42.9768V5.208C43.2648 4.83467 43.6328 4.54133 44.0808 4.328C44.5395 4.11467 45.0408 4.008 45.5848 4.008C46.2781 4.008 46.8968 4.15733 47.4408 4.456C47.9848 4.744 48.4061 5.16 48.7048 5.704C48.9928 5.192 49.4088 4.78133 49.9528 4.472C50.5075 4.16267 51.1048 4.008 51.7448 4.008ZM65.8704 4.136V13H63.6144V11.88C63.3264 12.264 62.9478 12.568 62.4784 12.792C62.0198 13.0053 61.5184 13.112 60.9744 13.112C60.2811 13.112 59.6678 12.968 59.1344 12.68C58.6011 12.3813 58.1798 11.9493 57.8704 11.384C57.5718 10.808 57.4224 10.1253 57.4224 9.336V4.136H59.6624V9.016C59.6624 9.72 59.8384 10.264 60.1904 10.648C60.5424 11.0213 61.0224 11.208 61.6304 11.208C62.2491 11.208 62.7344 11.0213 63.0864 10.648C63.4384 10.264 63.6144 9.72 63.6144 9.016V4.136H65.8704ZM72.9926 4.008C74.0486 4.008 74.9019 4.344 75.5526 5.016C76.2032 5.67733 76.5286 6.60533 76.5286 7.8V13H74.2886V8.104C74.2886 7.4 74.1126 6.86133 73.7606 6.488C73.4086 6.104 72.9286 5.912 72.3206 5.912C71.7019 5.912 71.2112 6.104 70.8486 6.488C70.4966 6.86133 70.3206 7.4 70.3206 8.104V13H68.0806V4.136H70.3206V5.24C70.6192 4.856 70.9979 4.55733 71.4566 4.344C71.9259 4.12 72.4379 4.008 72.9926 4.008ZM79.7947 3.08C79.4 3.08 79.0694 2.95733 78.8027 2.712C78.5467 2.456 78.4187 2.14133 78.4187 1.768C78.4187 1.39467 78.5467 1.08533 78.8027 0.839999C79.0694 0.583999 79.4 0.455999 79.7947 0.455999C80.1894 0.455999 80.5147 0.583999 80.7707 0.839999C81.0374 1.08533 81.1707 1.39467 81.1707 1.768C81.1707 2.14133 81.0374 2.456 80.7707 2.712C80.5147 2.95733 80.1894 3.08 79.7947 3.08ZM80.8987 4.136V13H78.6587V4.136H80.8987ZM85.7198 5.976V10.264C85.7198 10.5627 85.7891 10.7813 85.9278 10.92C86.0771 11.048 86.3225 11.112 86.6638 11.112H87.7038V13H86.2958C84.4078 13 83.4638 12.0827 83.4638 10.248V5.976H82.4078V4.136H83.4638V1.944H85.7198V4.136H87.7038V5.976H85.7198ZM97.7949 4.136L92.3069 17.192H89.9229L91.8429 12.776L88.2909 4.136H90.8029L93.0909 10.328L95.4109 4.136H97.7949ZM102.271 7.4C102.271 6.30133 102.516 5.32 103.007 4.456C103.508 3.58133 104.186 2.904 105.039 2.424C105.903 1.93333 106.868 1.688 107.935 1.688C109.183 1.688 110.276 2.008 111.215 2.648C112.154 3.288 112.81 4.17333 113.183 5.304H110.607C110.351 4.77067 109.988 4.37067 109.519 4.104C109.06 3.83733 108.527 3.704 107.919 3.704C107.268 3.704 106.687 3.85867 106.175 4.168C105.674 4.46667 105.279 4.89333 104.991 5.448C104.714 6.00267 104.575 6.65333 104.575 7.4C104.575 8.136 104.714 8.78667 104.991 9.352C105.279 9.90667 105.674 10.3387 106.175 10.648C106.687 10.9467 107.268 11.096 107.919 11.096C108.527 11.096 109.06 10.9627 109.519 10.696C109.988 10.4187 110.351 10.0133 110.607 9.48H113.183C112.81 10.6213 112.154 11.512 111.215 12.152C110.287 12.7813 109.194 13.096 107.935 13.096C106.868 13.096 105.903 12.856 105.039 12.376C104.186 11.8853 103.508 11.208 103.007 10.344C102.516 9.48 102.271 8.49867 102.271 7.4ZM120.088 4.008C120.76 4.008 121.358 4.15733 121.88 4.456C122.403 4.744 122.808 5.176 123.096 5.752C123.395 6.31733 123.544 7 123.544 7.8V13H121.304V8.104C121.304 7.4 121.128 6.86133 120.776 6.488C120.424 6.104 119.944 5.912 119.336 5.912C118.718 5.912 118.227 6.104 117.864 6.488C117.512 6.86133 117.336 7.4 117.336 8.104V13H115.096V1.16H117.336V5.24C117.624 4.856 118.008 4.55733 118.488 4.344C118.968 4.12 119.502 4.008 120.088 4.008ZM125.098 8.536C125.098 7.64 125.274 6.84533 125.626 6.152C125.989 5.45867 126.474 4.92533 127.082 4.552C127.701 4.17867 128.389 3.992 129.146 3.992C129.808 3.992 130.384 4.12533 130.874 4.392C131.376 4.65867 131.776 4.99467 132.074 5.4V4.136H134.33V13H132.074V11.704C131.786 12.12 131.386 12.4667 130.874 12.744C130.373 13.0107 129.792 13.144 129.13 13.144C128.384 13.144 127.701 12.952 127.082 12.568C126.474 12.184 125.989 11.6453 125.626 10.952C125.274 10.248 125.098 9.44267 125.098 8.536ZM132.074 8.568C132.074 8.024 131.968 7.56 131.754 7.176C131.541 6.78133 131.253 6.48267 130.89 6.28C130.528 6.06667 130.138 5.96 129.722 5.96C129.306 5.96 128.922 6.06133 128.57 6.264C128.218 6.46667 127.93 6.76533 127.706 7.16C127.493 7.544 127.386 8.00267 127.386 8.536C127.386 9.06933 127.493 9.53867 127.706 9.944C127.93 10.3387 128.218 10.6427 128.57 10.856C128.933 11.0693 129.317 11.176 129.722 11.176C130.138 11.176 130.528 11.0747 130.89 10.872C131.253 10.6587 131.541 10.36 131.754 9.976C131.968 9.58133 132.074 9.112 132.074 8.568ZM139.126 5.976V10.264C139.126 10.5627 139.195 10.7813 139.334 10.92C139.483 11.048 139.729 11.112 140.07 11.112H141.11V13H139.702C137.814 13 136.87 12.0827 136.87 10.248V5.976H135.814V4.136H136.87V1.944H139.126V4.136H141.11V5.976H139.126Z" fill="#1E1C14"/>
          </svg>     
        }
      </Button>
      {showChat && (
        <div className="absolute bottom-12 right-0 w-80 bg-white shadow-lg rounded-lg flex flex-col overflow-hidden">
          {/* Header */}
          <div className="flex items-center justify-between w-full py-4 px-4 border-b -mb-2">
            <svg width="153" height="20" viewBox="0 0 153 20" fill="none" xmlns="http://www.w3.org/2000/svg">
              <path d="M7.97563 15.2C6.94896 15.2 5.99563 15.02 5.11563 14.66C4.23563 14.2867 3.46229 13.7733 2.79563 13.12C2.14229 12.4533 1.63563 11.68 1.27563 10.8C0.928958 9.92 0.755625 8.97333 0.755625 7.96C0.755625 6.94667 0.928958 6 1.27563 5.12C1.63563 4.24 2.14229 3.47333 2.79563 2.82C3.46229 2.16667 4.22896 1.65333 5.09563 1.28C5.97563 0.906666 6.93563 0.719999 7.97563 0.719999C9.09563 0.719999 10.0823 0.906666 10.9356 1.28C11.789 1.64 12.5423 2.14 13.1956 2.78L11.3556 4.62C10.969 4.19333 10.4956 3.86 9.93563 3.62C9.37563 3.38 8.72229 3.26 7.97563 3.26C7.32229 3.26 6.72229 3.37333 6.17563 3.6C5.64229 3.81333 5.17563 4.13333 4.77563 4.56C4.37563 4.97333 4.06896 5.47333 3.85563 6.06C3.64229 6.63333 3.53563 7.26667 3.53563 7.96C3.53563 8.66667 3.64229 9.30667 3.85563 9.88C4.06896 10.4533 4.37563 10.9533 4.77563 11.38C5.17563 11.7933 5.64229 12.1133 6.17563 12.34C6.72229 12.5667 7.32229 12.68 7.97563 12.68C8.76229 12.68 9.43563 12.56 9.99563 12.32C10.569 12.08 11.049 11.74 11.4356 11.3L13.2756 13.14C12.6223 13.7933 11.8623 14.3 10.9956 14.66C10.129 15.02 9.12229 15.2 7.97563 15.2ZM19.1727 15.2C18.1993 15.2 17.3193 14.98 16.5327 14.54C15.7593 14.0867 15.1393 13.48 14.6727 12.72C14.2193 11.9467 13.9927 11.0867 13.9927 10.14C13.9927 9.19333 14.2193 8.34667 14.6727 7.6C15.126 6.84 15.746 6.24 16.5327 5.8C17.3193 5.34667 18.1927 5.12 19.1527 5.12C20.1393 5.12 21.0193 5.34667 21.7927 5.8C22.5793 6.24 23.1993 6.84 23.6527 7.6C24.106 8.34667 24.3327 9.19333 24.3327 10.14C24.3327 11.0867 24.106 11.9467 23.6527 12.72C23.1993 13.48 22.5793 14.0867 21.7927 14.54C21.0193 14.98 20.146 15.2 19.1727 15.2ZM19.1527 12.76C19.646 12.76 20.0793 12.6533 20.4527 12.44C20.8393 12.2133 21.1327 11.9067 21.3327 11.52C21.546 11.12 21.6527 10.6667 21.6527 10.16C21.6527 9.65333 21.546 9.20667 21.3327 8.82C21.1193 8.43333 20.826 8.13333 20.4527 7.92C20.0793 7.69333 19.646 7.58 19.1527 7.58C18.6727 7.58 18.246 7.69333 17.8727 7.92C17.4993 8.13333 17.206 8.43333 16.9927 8.82C16.7793 9.20667 16.6727 9.65333 16.6727 10.16C16.6727 10.6667 16.7793 11.12 16.9927 11.52C17.206 11.9067 17.4993 12.2133 17.8727 12.44C18.246 12.6533 18.6727 12.76 19.1527 12.76ZM26.0194 15V5.34H28.6394V15H26.0194ZM32.3194 15V9.3C32.3194 8.74 32.1394 8.30667 31.7794 8C31.4327 7.68 30.9994 7.52 30.4794 7.52C30.1327 7.52 29.8194 7.59333 29.5394 7.74C29.2594 7.87333 29.0394 8.07333 28.8794 8.34C28.7194 8.60667 28.6394 8.92667 28.6394 9.3L27.6194 8.8C27.6194 8.05333 27.7794 7.40667 28.0994 6.86C28.4327 6.31333 28.8794 5.89333 29.4394 5.6C29.9994 5.29333 30.6327 5.14 31.3394 5.14C32.006 5.14 32.6127 5.29333 33.1594 5.6C33.706 5.89333 34.1394 6.31333 34.4594 6.86C34.7794 7.39333 34.9394 8.04 34.9394 8.8V15H32.3194ZM38.6194 15V9.3C38.6194 8.74 38.4394 8.30667 38.0794 8C37.7327 7.68 37.2994 7.52 36.7794 7.52C36.446 7.52 36.1327 7.59333 35.8394 7.74C35.5594 7.87333 35.3394 8.07333 35.1794 8.34C35.0194 8.60667 34.9394 8.92667 34.9394 9.3L33.4394 8.94C33.4927 8.16667 33.6994 7.5 34.0594 6.94C34.4194 6.36667 34.8927 5.92667 35.4794 5.62C36.066 5.3 36.7194 5.14 37.4394 5.14C38.1594 5.14 38.806 5.29333 39.3794 5.6C39.9527 5.89333 40.406 6.32 40.7394 6.88C41.0727 7.44 41.2394 8.10667 41.2394 8.88V15H38.6194ZM43.3631 15V5.34H45.9831V15H43.3631ZM49.6631 15V9.3C49.6631 8.74 49.4831 8.30667 49.1231 8C48.7765 7.68 48.3431 7.52 47.8231 7.52C47.4765 7.52 47.1631 7.59333 46.8831 7.74C46.6031 7.87333 46.3831 8.07333 46.2231 8.34C46.0631 8.60667 45.9831 8.92667 45.9831 9.3L44.9631 8.8C44.9631 8.05333 45.1231 7.40667 45.4431 6.86C45.7765 6.31333 46.2231 5.89333 46.7831 5.6C47.3431 5.29333 47.9765 5.14 48.6831 5.14C49.3498 5.14 49.9565 5.29333 50.5031 5.6C51.0498 5.89333 51.4831 6.31333 51.8031 6.86C52.1231 7.39333 52.2831 8.04 52.2831 8.8V15H49.6631ZM55.9631 15V9.3C55.9631 8.74 55.7831 8.30667 55.4231 8C55.0765 7.68 54.6431 7.52 54.1231 7.52C53.7898 7.52 53.4765 7.59333 53.1831 7.74C52.9031 7.87333 52.6831 8.07333 52.5231 8.34C52.3631 8.60667 52.2831 8.92667 52.2831 9.3L50.7831 8.94C50.8365 8.16667 51.0431 7.5 51.4031 6.94C51.7631 6.36667 52.2365 5.92667 52.8231 5.62C53.4098 5.3 54.0631 5.14 54.7831 5.14C55.5031 5.14 56.1498 5.29333 56.7231 5.6C57.2965 5.89333 57.7498 6.32 58.0831 6.88C58.4165 7.44 58.5831 8.10667 58.5831 8.88V15H55.9631ZM64.8269 15.2C63.9735 15.2 63.2135 15.02 62.5469 14.66C61.8935 14.3 61.3802 13.8 61.0069 13.16C60.6335 12.52 60.4469 11.78 60.4469 10.94V5.34H63.0869V10.88C63.0869 11.28 63.1535 11.6267 63.2869 11.92C63.4202 12.2 63.6202 12.4133 63.8869 12.56C64.1535 12.7067 64.4669 12.78 64.8269 12.78C65.3735 12.78 65.8002 12.6133 66.1069 12.28C66.4135 11.9467 66.5669 11.48 66.5669 10.88V5.34H69.1869V10.94C69.1869 11.7933 69.0002 12.54 68.6269 13.18C68.2669 13.82 67.7535 14.32 67.0869 14.68C66.4335 15.0267 65.6802 15.2 64.8269 15.2ZM77.7733 15V9.46C77.7733 8.88667 77.5933 8.42 77.2333 8.06C76.8733 7.7 76.4066 7.52 75.8333 7.52C75.4599 7.52 75.1266 7.6 74.8333 7.76C74.5399 7.92 74.3066 8.14667 74.1333 8.44C73.9733 8.73333 73.8933 9.07333 73.8933 9.46L72.8733 8.94C72.8733 8.18 73.0333 7.52 73.3533 6.96C73.6866 6.38667 74.1399 5.94 74.7133 5.62C75.2999 5.3 75.9599 5.14 76.6933 5.14C77.3999 5.14 78.0333 5.32 78.5933 5.68C79.1533 6.02667 79.5933 6.48667 79.9133 7.06C80.2333 7.62 80.3933 8.22667 80.3933 8.88V15H77.7733ZM71.2733 15V5.34H73.8933V15H71.2733ZM82.5038 15V5.34H85.1438V15H82.5038ZM83.8238 3.78C83.3971 3.78 83.0438 3.64 82.7638 3.36C82.4838 3.06667 82.3438 2.70667 82.3438 2.28C82.3438 1.86667 82.4838 1.51333 82.7638 1.22C83.0438 0.926666 83.3971 0.779999 83.8238 0.779999C84.2638 0.779999 84.6171 0.926666 84.8838 1.22C85.1638 1.51333 85.3038 1.86667 85.3038 2.28C85.3038 2.70667 85.1638 3.06667 84.8838 3.36C84.6171 3.64 84.2638 3.78 83.8238 3.78ZM88.8847 15V1.32H91.5047V15H88.8847ZM86.6247 7.64V5.34H93.7647V7.64H86.6247ZM98.2781 15.08L94.2381 5.34H97.0781L99.7581 12.78H98.7981L101.578 5.34H104.438L100.138 15.08H98.2781ZM95.5981 19.04L98.5381 12.82L100.138 15.08L98.3781 19.04H95.5981ZM116.472 15.2C115.445 15.2 114.492 15.02 113.612 14.66C112.732 14.2867 111.958 13.7733 111.292 13.12C110.638 12.4533 110.132 11.68 109.772 10.8C109.425 9.92 109.252 8.97333 109.252 7.96C109.252 6.94667 109.425 6 109.772 5.12C110.132 4.24 110.638 3.47333 111.292 2.82C111.958 2.16667 112.725 1.65333 113.592 1.28C114.472 0.906666 115.432 0.719999 116.472 0.719999C117.592 0.719999 118.578 0.906666 119.432 1.28C120.285 1.64 121.038 2.14 121.692 2.78L119.852 4.62C119.465 4.19333 118.992 3.86 118.432 3.62C117.872 3.38 117.218 3.26 116.472 3.26C115.818 3.26 115.218 3.37333 114.672 3.6C114.138 3.81333 113.672 4.13333 113.272 4.56C112.872 4.97333 112.565 5.47333 112.352 6.06C112.138 6.63333 112.032 7.26667 112.032 7.96C112.032 8.66667 112.138 9.30667 112.352 9.88C112.565 10.4533 112.872 10.9533 113.272 11.38C113.672 11.7933 114.138 12.1133 114.672 12.34C115.218 12.5667 115.818 12.68 116.472 12.68C117.258 12.68 117.932 12.56 118.492 12.32C119.065 12.08 119.545 11.74 119.932 11.3L121.772 13.14C121.118 13.7933 120.358 14.3 119.492 14.66C118.625 15.02 117.618 15.2 116.472 15.2ZM129.883 15V9.46C129.883 8.88667 129.703 8.42 129.343 8.06C128.983 7.7 128.516 7.52 127.943 7.52C127.569 7.52 127.236 7.6 126.943 7.76C126.649 7.92 126.416 8.14667 126.243 8.44C126.083 8.73333 126.003 9.07333 126.003 9.46L124.983 8.94C124.983 8.18 125.143 7.52 125.463 6.96C125.783 6.38667 126.223 5.94 126.783 5.62C127.356 5.3 128.009 5.14 128.743 5.14C129.476 5.14 130.123 5.3 130.683 5.62C131.256 5.94 131.703 6.38 132.023 6.94C132.343 7.5 132.503 8.14667 132.503 8.88V15H129.883ZM123.383 15V0.539999H126.003V15H123.383ZM138.653 15.2C137.773 15.2 136.98 14.98 136.273 14.54C135.566 14.1 135.013 13.5 134.613 12.74C134.213 11.98 134.013 11.1267 134.013 10.18C134.013 9.22 134.213 8.36 134.613 7.6C135.013 6.84 135.566 6.24 136.273 5.8C136.98 5.36 137.773 5.14 138.653 5.14C139.346 5.14 139.966 5.28 140.513 5.56C141.06 5.84 141.493 6.23333 141.813 6.74C142.146 7.23333 142.326 7.79333 142.353 8.42V11.9C142.326 12.54 142.146 13.1067 141.813 13.6C141.493 14.0933 141.06 14.4867 140.513 14.78C139.966 15.06 139.346 15.2 138.653 15.2ZM139.133 12.78C139.866 12.78 140.46 12.54 140.913 12.06C141.366 11.5667 141.593 10.9333 141.593 10.16C141.593 9.65333 141.486 9.20667 141.273 8.82C141.073 8.42 140.786 8.11333 140.413 7.9C140.053 7.67333 139.626 7.56 139.133 7.56C138.653 7.56 138.226 7.67333 137.853 7.9C137.493 8.11333 137.206 8.42 136.993 8.82C136.793 9.20667 136.693 9.65333 136.693 10.16C136.693 10.68 136.793 11.14 136.993 11.54C137.206 11.9267 137.493 12.2333 137.853 12.46C138.226 12.6733 138.653 12.78 139.133 12.78ZM141.453 15V12.4L141.873 10.04L141.453 7.72V5.34H144.053V15H141.453ZM147.791 15V1.32H150.411V15H147.791ZM145.531 7.64V5.34H152.671V7.64H145.531Z" fill="black"/>
            </svg>
            <button className="text-gray-600 -mt-1" onClick={() => setShowChat(false)}>
              <X size={18} />
            </button>
          </div>

          {isEditCooldownActive && globalCooldownError && (
            <p className="text-red-500 text-xs p-2 bg-white text-center">{globalCooldownError}</p>
          )}
          {/* Messages */}
          <div 
            className="p-2 space-y-1 h-96 max-h-96 bg-[#F0F0F0] flex flex-col overflow-y-auto
              [&::-webkit-scrollbar]:w-1
              [&::-webkit-scrollbar-track]:rounded-full
              [&::-webkit-scrollbar-track]:bg-gray-100
              [&::-webkit-scrollbar-thumb]:rounded-full
              [&::-webkit-scrollbar-thumb]:bg-gray-300
              dark:[&::-webkit-scrollbar-track]:bg-[#F0F0F0]
              dark:[&::-webkit-scrollbar-thumb]:bg-neutral-400"
          >
            {chats && chats.length > 0 ? (
              chats.map((chat, index) => (
                <MessageComponent
                  key={chat.chatmessageid || `chat-${index}`}
                  sentBy={chat.sentby}
                  context={chat.content}
                  dateCreated={chat.datecreated}
                  viewingUserId={currentUserDetails.id}
                />
              ))
            ) : (
              <p className="text-gray-500 text-center">No messages yet!</p>
            )}
            <div ref={messagesEndRef} />
          </div>

          {/* Input Box */}
          <div className="flex items-center p-3 bg-white relative">
            <div className="flex-grow relative flex items-center justify-between bg-[#F0F0F0] rounded-full">
              <textarea 
                ref={chatInputRef}
                maxLength={MAX_CHAR_LIMIT}
                className="flex-grow p-2 text-sm bg-transparent text-black outline-none pl-4 resize-none overflow-hidden max-h-10"
                placeholder="Say hi to everyone!"
                value={message}
                disabled={isEditCooldownActive}
                onChange={(e) => {
                  if (isEditCooldownActive) return;
                  setMessage(e.target.value);
                  setCharCount(e.target.value.length); // Update char count
                  e.target.style.height = 'auto';
                  e.target.style.height = `${Math.min(e.target.scrollHeight, 80)}px`;
                }}
                onKeyDown={(e) => e.key === "Enter" && !e.shiftKey && (e.preventDefault(), sendMessage())}
                rows={1}
                style={{
                  resize: 'none',
                  minHeight: '32px',
                  maxHeight: '120px', // Increased maxHeight a bit just in case
                  width: '160px', 
                  maxWidth: '200px',
                  overflow: 'hidden', 
                }}
              />
              <Popover onOpenChange={setIsOpen} open={isOpen}>
                <PopoverTrigger asChild>
                  <button className="p-1 ml-auto mr-1">
                    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24">
                      <path fill="#13783e" d="M12 23C5.925 23 1 18.075 1 12S5.925 1 12 1s11 4.925 11 11s-4.925 11-11 11M6.769 11.866l3.464-2l-1-1.732l-3.464 2zm11.464-1.732l-3.464-2l-1 1.732l3.464 2zM9.4 14.499l-.501-.866l-1.731 1.002l.5.866A5 5 0 0 0 12 18a5 5 0 0 0 4.331-2.5l.501-.865l-1.731-1.001l-.5.865c-.521.9-1.491 1.5-2.6 1.5a3 3 0 0 1-2.6-1.5" />
                    </svg>
                  </button>
                </PopoverTrigger>
                <PopoverContent className="w-fit p-0">
                  <EmojiPicker
                    className="h-[170px] w-[250px]"
                    onEmojiSelect={({ emoji }) => {
                      setIsOpen(false)
                      setMessage(prevMessage => prevMessage + emoji) 
                      setCharCount(prevCharCount => prevCharCount + emoji.length); // Update char count
                    }}
                  >
                    <EmojiPickerSearch />
                    <EmojiPickerContent />
                  </EmojiPicker>
                </PopoverContent>
              </Popover>
            </div>          
          <button 
            onClick={sendMessage} 
            disabled={isEditCooldownActive || !currentUserDetails.id || !isConnected || message.trim().length === 0} // Disable if no user, not connected, or message empty
            className="p-2 text-gray-500 ml-1 disabled:opacity-50"
          >
            <Send size={20} />
          </button>
        </div>
      </div>
    )}
    </div>
  );
}